 const fetchTaskData = async (selectedRow) => {
    setIsLoading(true);
    try {
      if (!priorityData || !statusData || !taskProject || !taskDepartment) {
        setIsLoading(false);
        return;
      }

      const taskData = await fetchTaskDataApi(selectedRow ?? {});

      const labeledTasks = mapTaskLabels(taskData);
      const enhanceTask = (task) => {
        const priority = priorityData?.find(item => item?.id == task?.priorityid);
        const status = statusData?.find(item => item?.id == task?.statusid);
        const project = taskProject?.find(item => item?.id == task?.projectid);
        const department = taskDepartment?.find(item => item?.id == task?.departmentid);

        const enhancedSubtasks = task?.subtasks?.map((subtask) => ({
          ...enhanceTask(subtask),
          subtaskflag: 1,
        }));

        return {
          ...task,
          priority: priority ? priority?.labelname : '',
          status: status ? status?.labelname : '',
          taskPr: project ? project?.labelname : '',
          taskDpt: department ? department?.labelname : '',
          subtasks: enhancedSubtasks || [],
          subtaskflag: 0,
        };
      };

      const enhancedTasks = labeledTasks?.map(task => enhanceTask(task));

      setTasks((prevTasks) => {
        if (!Array.isArray(prevTasks)) return [...enhancedTasks];

        const updateSubtasks = (subtasks, visited = new Set()) => {
          if (!Array.isArray(subtasks) || subtasks.length === 0) return subtasks;

          return subtasks.map((subtask) => {
            if (visited.has(subtask.taskid)) return subtask;

            visited.add(subtask.taskid);

            const matchingSubtask = enhancedTasks.find(
              (newTask) => newTask?.taskid === subtask?.taskid
            );

            if (matchingSubtask) {
              return {
                ...subtask,
                ...matchingSubtask,
                subtasks: updateSubtasks(
                  matchingSubtask.subtasks || subtask.subtasks,
                  visited
                ),
              };
            }
            return {
              ...subtask,
              subtasks: updateSubtasks(subtask.subtasks, visited),
            };
          });
        };

        return prevTasks.map((task) => ({
          ...task,
          subtasks: updateSubtasks(task?.subtasks),
        }));
      });

      console.log('enhancedTasks: ', enhancedTasks);
    } catch (error) {
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };





  const fetchTaskData = async (selectedRow) => {
  setIsLoading(true);
  try {
    if (!priorityData || !statusData || !taskProject || !taskDepartment) {
      console.log("Master data not yet loaded");
      setIsLoading(false);
      return;
    }

    const taskData = await fetchTaskDataApi(selectedRow ?? {});
    const labeledTasks = mapTaskLabels(taskData);

    const enhanceTask = (task) => {
      const priority = priorityData?.find(item => item?.id == task?.priorityid);
      const status = statusData?.find(item => item?.id == task?.statusid);
      const project = taskProject?.find(item => item?.id == task?.projectid);
      const department = taskDepartment?.find(item => item?.id == task?.departmentid);

      const enhancedSubtasks = task?.subtasks?.map((subtask) => ({
        ...enhanceTask(subtask),
        subtaskflag: 1,
      }));

      return {
        ...task,
        priority: priority ? priority?.labelname : '',
        status: status ? status?.labelname : '',
        taskPr: project ? project?.labelname : '',
        taskDpt: department ? department?.labelname : '',
        subtasks: enhancedSubtasks || [],
        subtaskflag: 0,
      };
    };

    const enhancedTasks = labeledTasks?.map(task => enhanceTask(task));

    setTasks((prevTasks) => {
      const taskMap = new Map(
        prevTasks.map(task => [task.taskid, task]) // Map existing tasks for quick lookup
      );

      const mergeTasks = (existing, updates) => {
        return updates.map((update) => {
          const existingTask = taskMap.get(update.taskid);
          if (existingTask) {
            return {
              ...existingTask,
              ...update, // Merge new data
              subtasks: mergeTasks(existingTask.subtasks || [], update.subtasks || []),
            };
          }
          return { ...update };
        });
      };

      return mergeTasks(prevTasks, enhancedTasks);
    });

    console.log('enhancedTasks: ', enhancedTasks);
  } catch (error) {
    console.error(error);
  } finally {
    setIsLoading(false);
  }
};
