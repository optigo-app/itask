import React, { useEffect, useState } from 'react';
import {
    Box, IconButton, Typography, Divider, Grid, Card, Tabs, Tab,
    Avatar,
    useTheme,
    Drawer,
    Button,
    ToggleButtonGroup,
    ToggleButton,
} from '@mui/material';
import { CircleX, Expand, Shrink, Download, ListTodo, List } from 'lucide-react';
import './TaskDetails.scss';
import { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';
import { fetchlistApiCall, formData, openFormDrawer, TaskData } from '../../../Recoil/atom';
import { taskDescGetApi } from '../../../Api/TaskApi/TaskDescGetApi';
import { taskCommentGetApi } from '../../../Api/TaskApi/TaskCommentGetApi';
import { taskCommentAddApi } from '../../../Api/TaskApi/TaskCommentAddApi';
import { taskDescAddApi } from '../../../Api/TaskApi/TaskDescAddApi';
import AttachmentImg from "../../../Assests/Attachment.webp"
import { formatDate3, getRandomAvatarColor, priorityColors, statusColors } from '../../../Utils/globalfun';
import { deleteTaskDataApi } from '../../../Api/TaskApi/DeleteTaskApi';
import { toast } from 'react-toastify';
import ConfirmationDialog from '../../../Utils/ConfirmationDialog/ConfirmationDialog';
import CommentSection from './TaskComment';
import AttachmentGrid from './AttachmentGrid';
import { TaskDescription } from './TaskDescription';

const TAB_OPTIONS = [
    { id: 1, value: "details", label: "Detail", icon: <ListTodo size={20} /> },
    { id: 2, value: "subtasks", label: "Subtask", icon: <List size={20} /> },
    { id: 3, value: "comments", label: "Comment", icon: <List size={20} /> },
];

const TaskDetail = ({ open, onClose }) => {
    const theme = useTheme();
    const [taskArr, setTaskArr] = useRecoilState(TaskData);
    const taskData = useRecoilValue(formData);
    const setCallTaskApi = useSetRecoilState(fetchlistApiCall);
    const [isFullScreen, setIsFullScreen] = useState(false);
    const [count, setCount] = useState(2);
    const [taskDesc, setTaskDesc] = useState('');
    const [taskDescEdit, setTaskDescEdit] = useState(false);
    const [comments, setComments] = useState([]);
    const [newComment, setNewComment] = useState('');
    const [activeTab, setActiveTab] = useState('details');
    const [cnfDialogOpen, setCnfDialogOpen] = React.useState(false);
    const setFormDrawerOpen = useSetRecoilState(openFormDrawer);
    const [formDataValue, setFormDataValue] = useRecoilState(formData);
    const placeholderImage = AttachmentImg;

    const assignees = [
        { name: "Aarav Sharma", avatar: "" },
        { name: "Ishita Verma", avatar: "" },
        { name: "Rajesh Iyer", avatar: "" },
        { name: "Priya Nair", avatar: "" },
        { name: "Vikram Singh", avatar: "" },
        { name: "Ananya Reddy", avatar: "" },
        { name: "Karthik Menon", avatar: "" },
        { name: "Neha Gupta", avatar: "" },
        { name: "Suresh Patil", avatar: "" },
        { name: "Meera Joshi", avatar: "" }
    ];

    const handleRemoveEvent = () => {
        setCnfDialogOpen(true);
    };

    // remove Task
    const removeTaskRecursively = (tasks, taskIdToRemove) => {
        return tasks
            .map(task => {
                if (task.subtasks) {
                    return {
                        ...task,
                        subtasks: removeTaskRecursively(task.subtasks, taskIdToRemove)
                    };
                }
                return task;
            })
            .filter(task => task.taskid !== taskIdToRemove);
    };

    const handleConfirmRemoveAll = async () => {
        setCnfDialogOpen(false);
        try {
            const deleteTaskApi = await deleteTaskDataApi(formDataValue);
            if (deleteTaskApi?.rd[0]?.stat === 1) {
                const updatedTaskArr = removeTaskRecursively(taskArr, formDataValue.taskid);
                setTaskArr(updatedTaskArr);
                setCallTaskApi(true);
                setFormDrawerOpen(false);
                setFormDataValue(null);
                onClose();
                toast.success("Task deleted successfully!");
            } else {
                console.error("Failed to delete task");
            }
        } catch (error) {
            console.error("Error while deleting task:", error);
        }
    };

    const handleCloseDialog = () => {
        setCnfDialogOpen(false);
    };

    const handleShowEditDesc = () => {
        setTaskDescEdit(!taskDescEdit);
    };

    const handleClose = () => {
        onClose();
    }

    const toggleFullScreen = () => setIsFullScreen(!isFullScreen);
    const handleTabChange = (event, newValue) => setActiveTab(newValue);

    useEffect(() => {
        const fetchTaskDesc = async () => {
            try {
                const taskdesc = await taskDescGetApi(taskData);
                if (taskdesc) {
                    setTaskDesc(taskdesc.rd[0]);
                }

                const taskComment = await taskCommentGetApi(taskData);
                if (taskComment) {
                    setComments(taskComment?.rd);
                }
            } catch (error) {
                console.error('Error fetching task description: ', error);
            }
        };

        if (open) {
            fetchTaskDesc();
        }
    }, [open, taskData]);

    const handleCommentChange = (event) => {
        setNewComment(event.target.value);
    };

    const handleSendComment = async () => {
        if (newComment.trim()) {
            const newCommentData = {
                title: `Comment ${comments.length + 1}`,
                description: newComment,
                timestamp: Date.now(),
            };

            try {
                const addCommentResponse = await taskCommentAddApi(taskData, newCommentData);
                if (addCommentResponse) {
                    setComments((prevComments) => [...prevComments, newCommentData]);
                    setNewComment('');
                } else {
                    console.error('Failed to add comment');
                }
            } catch (error) {
                console.error('Error while sending comment:', error);
            }
        }
    };

    const handleDescChange = (event) => {
        setTaskDesc(event.target.value);
    };

    const handleUpdateDesc = async () => {
        let desc = typeof taskDesc === 'string' ? taskDesc : taskDesc?.descr;
        try {
            const updateDescResponse = await taskDescAddApi(taskData, desc);
            if (updateDescResponse) {
                // Update the state with the new description
                setTaskDesc(desc);  // This line is crucial
                setTaskDescEdit(false);
            } else {
                console.error('Failed to update description');
            }
        } catch (error) {
            console.error('Error while updating description:', error);
        }
    };

    const background = (assignee) => {
        const avatarBackgroundColor = assignee?.avatar
            ? "transparent"
            : getRandomAvatarColor(assignee?.name);
        return avatarBackgroundColor;
    };

    return (
        <div>
            <Drawer
                anchor="right"
                open={open}
                onClose={handleClose}
                className="MainDrawer"
                sx={{ display: open == true ? 'block' : 'none', zIndex: theme.zIndex.drawer + 2, }}
            >
                <Box className={`modal-container ${isFullScreen && isFullScreen ? '' : 'full-screen'}`}>
                    <div className='modal-container2'>
                        <Box className="modal-header">
                            <div className="header-left">
                                <IconButton onClick={toggleFullScreen}>
                                    {isFullScreen && isFullScreen ? <Shrink /> : <Expand />}
                                </IconButton>
                                <Divider orientation="vertical" variant="middle" flexItem />
                                <Typography variant="h6">{taskData?.taskDpt} / {taskData?.taskPr}</Typography>
                            </div>
                            <IconButton onClick={handleClose}>
                                <CircleX />
                            </IconButton>
                        </Box>
                        <div
                            style={{
                                margin: "0 0 10px 0",
                                border: "1px dashed #7d7f85",
                                opacity: 0.3,
                            }}
                        />
                        <Box className="modal-body">
                            <Box className="titlebox">
                                <Typography variant="h4" className="task-title">{taskData?.taskname}</Typography>
                                <Button
                                    variant="contained"
                                    onClick={() => handleRemoveEvent()}
                                    sx={{ marginRight: "10px" }}
                                    className="danger-btn"
                                // disabled={isLoading}
                                >
                                    Delete
                                </Button>
                            </Box>
                            <Grid item xs={12}>
                                <ToggleButtonGroup
                                    value={activeTab}
                                    exclusive
                                    onChange={handleTabChange}
                                    aria-label="task type"
                                    size="small"
                                    className="toggle-group"
                                >
                                    {TAB_OPTIONS?.map(({ id, value, label, icon }) => (
                                        <ToggleButton
                                            key={id}
                                            value={value}
                                            className="toggle-button"
                                            sx={{
                                                borderRadius: "8px",
                                            }}
                                        >
                                            {icon}
                                            {label}
                                        </ToggleButton>
                                    ))}
                                </ToggleButtonGroup>
                               
                                <Box className="tab-content">
                                    {activeTab === 'details' &&
                                        <Grid container className="task-details">
                                            <Grid container spacing={2}>
                                                <Grid item xs={3}>
                                                    <Typography className="tasklable">Status</Typography>
                                                </Grid>
                                                <Grid item xs={9}>
                                                    <Typography
                                                        sx={{
                                                            color: `${statusColors[taskData?.status]?.color} !important`,
                                                            backgroundColor: statusColors[taskData?.status]?.backgroundColor,
                                                        }}
                                                        className='tasklable'
                                                    >{taskData?.status}
                                                    </Typography>
                                                </Grid>
                                                <Grid item xs={3}>
                                                    <Typography className="tasklable">Priority</Typography>
                                                </Grid>
                                                <Grid item xs={9}>
                                                    <Typography
                                                        sx={{
                                                            color: `${priorityColors[taskData?.priority]?.color} !important`,
                                                            backgroundColor: priorityColors[taskData?.priority]?.backgroundColor,
                                                        }}
                                                        className='tasklable'
                                                    >{taskData?.priority}
                                                    </Typography>
                                                </Grid>
                                            </Grid>

                                            <Grid container spacing={2}>
                                            <Grid item xs={3}>
                                                <Typography className="tasklable">Assignees</Typography>
                                            </Grid>
                                            <Grid item xs={9}>
                                                <Grid container spacing={1}>
                                                    {assignees?.map((assignee, index) => (
                                                        <Grid item key={index}>
                                                            <Box
                                                                sx={{
                                                                    display: 'flex',
                                                                    alignItems: 'center',
                                                                    gap: '5px',
                                                                    background: '#4c4c4c0d',
                                                                    padding: '0px 10px 0px 0px',
                                                                    borderRadius: '30px',
                                                                }}
                                                            >
                                                                <Avatar
                                                                    alt={assignee.name}
                                                                    src={assignee.avatars || undefined}
                                                                    sx={{
                                                                        background: `${background(assignee)} !important`,
                                                                        color: '#fff',
                                                                        width: '25px',
                                                                        height: '25px',
                                                                        fontSize: '13px',
                                                                    }}
                                                                >
                                                                    {assignee.avatars ? null : assignee.name.charAt(0)}
                                                                </Avatar>
                                                                <span>{assignee.name}</span>
                                                            </Box>
                                                        </Grid>
                                                    ))}
                                                </Grid>
                                            </Grid>
                                            </Grid>
                                            <TaskDescription
                                                taskDesc={taskDesc}
                                                taskDescEdit={taskDescEdit}
                                                handleShowEditDesc={handleShowEditDesc}
                                                handleDescChange={handleDescChange}
                                                handleUpdateDesc={handleUpdateDesc}
                                            />
                                            <Grid item xs={12} className="attachment-header">
                                                <Typography className='tasklable'>Attachment ({count})</Typography>
                                                <IconButton onClick={() => alert('Download Attachment')} sx={{ borderRadius: '8px' }}>
                                                    <Download color='#7367f0' size={20} />
                                                    <span style={{ color: '#7367f0', fontSize: '15px', paddingLeft: '5px' }}>Download All</span>
                                                </IconButton>
                                            </Grid>
                                            <AttachmentGrid count={count} placeholderImage={placeholderImage} />
                                        </Grid>
                                    }
                                    {activeTab === 'subtasks' &&
                                        <>
                                            {taskData?.subtasks?.map((subtask, index) => (
                                                <Card key={index} className="subtask-card">
                                                    <Grid container spacing={2} padding={2}>
                                                        <Grid item xs={12} sm={8}>
                                                            {/* Title and Description */}
                                                            <Typography variant="h6">{subtask?.taskname}</Typography>
                                                        </Grid>
                                                        <Grid item xs={12} sm={4} sx={{ display: 'flex', justifyContent: 'flex-end', flexDirection: 'column', alignItems: 'flex-end' }}>
                                                            {/* Date/Time */}
                                                            <Typography variant="caption" color="text.secondary" sx={{ fontSize: '12px !important' }}>
                                                                {formatDate3(subtask?.DeadLineDate)}
                                                            </Typography>
                                                        </Grid>
                                                    </Grid>
                                                </Card>
                                            ))}
                                        </>
                                    }
                                    {activeTab === 'comments' && (
                                        <CommentSection
                                            comments={comments}
                                            newComment={newComment}
                                            onCommentChange={handleCommentChange}
                                            onSendComment={handleSendComment}
                                        />
                                    )}

                                </Box>
                            </Grid>
                        </Box>
                    </div>
                </Box>
            </Drawer>
            <ConfirmationDialog
                open={cnfDialogOpen}
                onClose={handleCloseDialog}
                onConfirm={handleConfirmRemoveAll}
                title="Confirm"
                content="Are you sure you want to remove this task?"
            />
        </div>
    );
};

export default TaskDetail;
