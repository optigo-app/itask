import React, { useEffect, useState } from "react";
import {
    Drawer,
    List,
    ListItem,
    ListItemButton,
    ListItemIcon,
    ListItemText,
    IconButton,
    Box,
    Tooltip,
    FormControlLabel,
    Checkbox,
    TextField,
    MenuItem,
    Typography,
} from "@mui/material";
import {
    Home,
    Task,
    Work,
    Mail,
    MeetingRoom,
    CalendarToday,
    Menu as MenuIcon,
    ChevronLeft as ChevronLeftIcon,
} from "@mui/icons-material";

import { CalendarCheck, Component, FileCheck, Folders, House, Inbox, SquareChartGantt } from 'lucide-react';

import { useTheme } from "@mui/material/styles";
import useMediaQuery from "@mui/material/useMediaQuery";
import './sidebar.scss';
import { useLocation, useNavigate } from "react-router-dom";
import logo from "../../Assests/logo.png"

const Sidebar = () => {
    const theme = useTheme();
    const navigate = useNavigate()
    const location = useLocation();
    const isMobile = useMediaQuery(theme.breakpoints.down("md"));
    const [formValues, setFormValues] = React.useState({});
    const [isDrawerOpen, setDrawerOpen] = useState(true);
    const [isFullSidebar, setFullSidebar] = useState(true);
    const [activeItem, setActiveItem] = useState('Home');
    const drawerWidth = isFullSidebar || isDrawerOpen ? 260 : 80;

    const toggleDrawer = () => setDrawerOpen(!isDrawerOpen);
    const toggleSidebar = (event) => setFullSidebar(event.target.checked);
    const departmentData = JSON?.parse(sessionStorage?.getItem("taskDepartmentData"));

    const handleMouseEnter = () => {
        if (!isFullSidebar && !isMobile) {
            setDrawerOpen(true);
        }
    };

    const handleMouseLeave = () => {
        if (!isFullSidebar && !isMobile) {
            setDrawerOpen(false);
        }
    };

    // Handle form value changes
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormValues((prev) => ({
            ...prev,
            [name]: value,
        }));
    }

    const handleItemClick = (item, route) => {
        setActiveItem(item);
        navigate(route)
        if (isMobile) {
            setDrawerOpen(false);
        }
    };

    useEffect(() => {
        const path = location?.pathname?.split('/')[1];
        setActiveItem(path.charAt(0)?.toUpperCase() + path?.slice(1) || 'Home');
    }, [location])

    const drawerContent = (
        <List sx={{ padding: '0' }}>
            <ListItem className="itask_drawerHeader"
                onClick={() => {
                    navigate("/");
                    if (toggleDrawer) toggleDrawer();
                }}>
                <ListItemButton className="itask_drawerListItem"
                    sx={{
                        "&:hover": { backgroundColor: "transparent !important" }
                    }}
                >
                    <Box className="itask_drawerHeader" sx={{ justifyContent: isDrawerOpen ? "space-between" : "space-between !important" }}>
                        <div className="itask_logoWrapper">
                            <img src={logo} alt="Itask Logo" className="itask_logo" />
                            <ListItemText
                                primary="Itask"
                                className="itask_logoText"
                            />
                        </div>
                    </Box>
                </ListItemButton>
            </ListItem>
            <div className="itask_separator" />
            {/* <ListItem sx={{ display: 'block' }}>
                <Typography variant="subtitle1" id='status'>Work Spaces</Typography>
                <TextField
                    name="workSpace"
                    value={formValues?.department || "2"}
                    onChange={handleChange}
                    select
                    aria-label="Select work space"
                    {...commonTextFieldProps}
                    {...commonSelectProps}
                    {...commonTextFieldProps}
                    {...commonSelectProps}
                >
                    <MenuItem value="">
                        <em>Select Departmant</em>
                    </MenuItem>
                    {departmentData?.map((department) => (
                        <MenuItem name={department?.id} key={department?.id} value={department?.id}>
                            {department?.labelname}
                        </MenuItem>
                    ))}
                </TextField>
            </ListItem> */}
            {/* <div className="itask_separator" /> */}
            {/* Home */}
            <ListItem onClick={() => handleItemClick('Home', '/')}>
                <ListItemButton className={`itask_drawerListItem ${activeItem === 'Home' ? 'itask_drawerItemActive' : ''}`}>
                    <ListItemIcon className="itask_drawerItemIcon">
                        <House className={activeItem === 'Home' ? "iconActive" : 'iconUnactive'} size={22} />
                    </ListItemIcon>
                    {<ListItemText className="itask_drawerItemText" primary="Home" />}
                </ListItemButton>
            </ListItem>

            {/* Task */}
            <ListItem onClick={() => handleItemClick('Task', '/tasks')}>
                <ListItemButton className={`itask_drawerListItem ${activeItem === 'Tasks' ? 'itask_drawerItemActive' : ''}`}>
                    <ListItemIcon className="itask_drawerItemIcon">
                        <FileCheck className={activeItem === 'Tasks' ? "iconActive" : 'iconUnactive'} size={22} />
                    </ListItemIcon>
                    {<ListItemText className="itask_drawerItemText" primary="Task" />}
                </ListItemButton>
            </ListItem>

            {/* Project */}
            <ListItem onClick={() => handleItemClick('Project', '/projects')}>
                <ListItemButton className={`itask_drawerListItem ${activeItem === 'Projects' ? 'itask_drawerItemActive' : ''}`}>
                    <ListItemIcon className="itask_drawerItemIcon">
                        <SquareChartGantt className={activeItem === 'Projects' ? "iconActive" : 'iconUnactive'} size={22} />
                    </ListItemIcon>
                    {<ListItemText className="itask_drawerItemText" primary="Project" />}
                </ListItemButton>
            </ListItem>

            {/* Inbox */}
            <ListItem onClick={() => handleItemClick('Inbox', '/inbox')}>
                <ListItemButton className={`itask_drawerListItem ${activeItem === 'Inbox' ? 'itask_drawerItemActive' : ''}`}>
                    <ListItemIcon className="itask_drawerItemIcon">
                        <Inbox className={activeItem === 'Inbox' ? "iconActive" : 'iconUnactive'} size={22} />
                    </ListItemIcon>
                    {<ListItemText className="itask_drawerItemText" primary="Inbox" />}
                </ListItemButton>
            </ListItem>

            {/* Meeting */}
            <ListItem onClick={() => handleItemClick('Meeting', '/meetings')}>
                <ListItemButton className={`itask_drawerListItem ${activeItem === 'Meetings' ? 'itask_drawerItemActive' : ''}`}>
                    <ListItemIcon className="itask_drawerItemIcon">
                        <Component className={activeItem === 'Meetings' ? "iconActive" : 'iconUnactive'} size={22} />
                    </ListItemIcon>
                    {<ListItemText className="itask_drawerItemText" primary="Meeting" />}
                </ListItemButton>
            </ListItem>

            {/* Calendar */}
            <ListItem onClick={() => handleItemClick('Calendar', '/calendar')}>
                <ListItemButton className={`itask_drawerListItem ${activeItem === 'Calendar' ? 'itask_drawerItemActive' : ''}`}>
                    <ListItemIcon className="itask_drawerItemIcon">
                        <CalendarCheck className={activeItem === 'Calendar' ? "iconActive" : 'iconUnactive'} size={22} />
                    </ListItemIcon>
                    {<ListItemText className="itask_drawerItemText" primary="Calendar" />}
                </ListItemButton>
            </ListItem>

            {/* Masters */}
            <ListItem onClick={() => handleItemClick('Masters', '/masters')}>
                <ListItemButton className={`itask_drawerListItem ${activeItem === 'Masters' ? 'itask_drawerItemActive' : ''}`}>
                    <ListItemIcon className="itask_drawerItemIcon">
                        <Folders className={activeItem === 'Masters' ? "iconActive" : 'iconUnactive'} size={22} />
                    </ListItemIcon>
                    {<ListItemText className="itask_drawerItemText" primary="Masters" />}
                </ListItemButton>
            </ListItem>
        </List>
    );

    return (
        <Box className="itask_sidebarDrawer">
            {/* Button to toggle sidebar */}
            {isMobile &&
                <div
                    onClick={toggleDrawer}
                    className={`itask_drawerButton ${isDrawerOpen ? 'itask_drawerButtonOpen' : ''}`}
                >
                    {isDrawerOpen ? <ChevronLeftIcon /> : <MenuIcon />}
                </div>
            }
            {/* Drawer Component */}
            <Drawer
                variant={isMobile ? "temporary" : "permanent"}
                open={isMobile ? isDrawerOpen : true}
                onClose={() => setDrawerOpen(false)}
                onMouseEnter={handleMouseEnter}
                onMouseLeave={handleMouseLeave}
                sx={{
                    width: drawerWidth,
                    flexShrink: 0,
                    '& .MuiDrawer-paper': {
                        width: drawerWidth,
                        boxSizing: "border-box",
                        boxShadow: '0 .125rem .5rem 0 rgba(47, 43, 61, .12)'
                    },
                }}
                aria-labelledby="sidebar-drawer"
                aria-describedby="sidebar-drawer"
            >
                {drawerContent}
            </Drawer>
        </Box>
    );
};

export default Sidebar;
